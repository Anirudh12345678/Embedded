
LiveTemperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800265c  0800265c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800265c  0800265c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800265c  0800265c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800265c  0800265c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002664  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000324  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008841  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015fd  00000000  00000000  000288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000670  00000000  00000000  00029eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004c9  00000000  00000000  0002a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000214fc  00000000  00000000  0002a9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007fc7  00000000  00000000  0004beed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d44e4  00000000  00000000  00053eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ab8  00000000  00000000  00128398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00129e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002644 	.word	0x08002644

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002644 	.word	0x08002644

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>
 8000964:	0000      	movs	r0, r0
	...

08000968 <main>:
  * @brief  The application entry point.
  * @retval int
  */
#define VSENSE 3.3/4096
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int data;
	double volt,temp;
	RCC->APB2ENR |= 0x00000100; //Enable ADC1 clock
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <main+0xf8>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a3b      	ldr	r2, [pc, #236]	; (8000a60 <main+0xf8>)
 8000974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->SQR3 |= 16; // Select the ADC Channel
 800097a:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <main+0xfc>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097e:	4a39      	ldr	r2, [pc, #228]	; (8000a64 <main+0xfc>)
 8000980:	f043 0310 	orr.w	r3, r3, #16
 8000984:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SMPR1 |= 1<<18|1<<19|1<<20; // Select the sampling rate
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <main+0xfc>)
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <main+0xfc>)
 800098c:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000990:	60d3      	str	r3, [r2, #12]
	ADC->CCR |= 0x800000; //Enable the temp sensor
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <main+0x100>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a34      	ldr	r2, [pc, #208]	; (8000a68 <main+0x100>)
 8000998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800099c:	6053      	str	r3, [r2, #4]
	ADC->CCR &= ~0x400000; //VBATE must be disabled for temp sensor
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <main+0x100>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <main+0x100>)
 80009a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009a8:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= 1<<0|1<<1; //ADON and CONT enabled
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <main+0xfc>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <main+0xfc>)
 80009b0:	f043 0303 	orr.w	r3, r3, #3
 80009b4:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= 1<<30; // Start Conversion
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <main+0xfc>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <main+0xfc>)
 80009bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80009c0:	6093      	str	r3, [r2, #8]
	while(1){
		while(!(ADC1->SR & 2)) {}
 80009c2:	bf00      	nop
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <main+0xfc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <main+0x5c>
		data = ADC1->DR;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <main+0xfc>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	617b      	str	r3, [r7, #20]
		volt = (double)data/4095*3300;
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fd48 	bl	800046c <__aeabi_i2d>
 80009dc:	a31c      	add	r3, pc, #112	; (adr r3, 8000a50 <main+0xe8>)
 80009de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e2:	f7ff fed7 	bl	8000794 <__aeabi_ddiv>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	a31a      	add	r3, pc, #104	; (adr r3, 8000a58 <main+0xf0>)
 80009f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f4:	f7ff fda4 	bl	8000540 <__aeabi_dmul>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		temp = (((volt-760.0)/2.5) + 25)/2;
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <main+0x104>)
 8000a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a0a:	f7ff fbe1 	bl	80001d0 <__aeabi_dsub>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	460b      	mov	r3, r1
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <main+0x108>)
 8000a1c:	f7ff feba 	bl	8000794 <__aeabi_ddiv>
 8000a20:	4602      	mov	r2, r0
 8000a22:	460b      	mov	r3, r1
 8000a24:	4610      	mov	r0, r2
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <main+0x10c>)
 8000a2e:	f7ff fbd1 	bl	80001d4 <__adddf3>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 0200 	mov.w	r2, #0
 8000a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a42:	f7ff fea7 	bl	8000794 <__aeabi_ddiv>
 8000a46:	4602      	mov	r2, r0
 8000a48:	460b      	mov	r3, r1
 8000a4a:	e9c7 2300 	strd	r2, r3, [r7]
		while(!(ADC1->SR & 2)) {}
 8000a4e:	e7b8      	b.n	80009c2 <main+0x5a>
 8000a50:	00000000 	.word	0x00000000
 8000a54:	40affe00 	.word	0x40affe00
 8000a58:	00000000 	.word	0x00000000
 8000a5c:	40a9c800 	.word	0x40a9c800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40012000 	.word	0x40012000
 8000a68:	40012300 	.word	0x40012300
 8000a6c:	4087c000 	.word	0x4087c000
 8000a70:	40040000 	.word	0x40040000
 8000a74:	40390000 	.word	0x40390000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f848 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <OTG_FS_IRQHandler+0x10>)
 8000ad2:	f000 f855 	bl	8000b80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000024 	.word	0x20000024

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 fd63 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff ff17 	bl	8000968 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b48:	08002664 	.word	0x08002664
  ldr r2, =_sbss
 8000b4c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b50:	20000328 	.word	0x20000328

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000020 	.word	0x20000020

08000b80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fa0f 	bl	8001fba <USB_GetMode>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	f040 80f6 	bne.w	8000d90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 f9f3 	bl	8001f94 <USB_ReadInterrupts>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f000 80ec 	beq.w	8000d8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f9ea 	bl	8001f94 <USB_ReadInterrupts>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000bca:	d104      	bne.n	8000bd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f9da 	bl	8001f94 <USB_ReadInterrupts>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000bea:	d104      	bne.n	8000bf6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f9ca 	bl	8001f94 <USB_ReadInterrupts>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c0a:	d104      	bne.n	8000c16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f9ba 	bl	8001f94 <USB_ReadInterrupts>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d103      	bne.n	8000c32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f9ac 	bl	8001f94 <USB_ReadInterrupts>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c46:	d11c      	bne.n	8000c82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10f      	bne.n	8000c82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000c62:	2110      	movs	r1, #16
 8000c64:	6938      	ldr	r0, [r7, #16]
 8000c66:	f001 f8d9 	bl	8001e1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000c6a:	6938      	ldr	r0, [r7, #16]
 8000c6c:	f001 f90a 	bl	8001e84 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2101      	movs	r1, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f9ad 	bl	8001fd6 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f001 fc3e 	bl	80024fe <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f984 	bl	8001f94 <USB_ReadInterrupts>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c96:	d102      	bne.n	8000c9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f001 f829 	bl	8001cf0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f976 	bl	8001f94 <USB_ReadInterrupts>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d106      	bne.n	8000cc0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f001 fc07 	bl	80024c6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f965 	bl	8001f94 <USB_ReadInterrupts>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b10      	cmp	r3, #16
 8000cd2:	d101      	bne.n	8000cd8 <HAL_HCD_IRQHandler+0x158>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <HAL_HCD_IRQHandler+0x15a>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d012      	beq.n	8000d04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0210 	bic.w	r2, r2, #16
 8000cec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 ff2c 	bl	8001b4c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0210 	orr.w	r2, r2, #16
 8000d02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 f943 	bl	8001f94 <USB_ReadInterrupts>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d18:	d13a      	bne.n	8000d90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 f993 	bl	800204a <USB_HC_ReadInterrupt>
 8000d24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e025      	b.n	8000d78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d018      	beq.n	8000d72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	015a      	lsls	r2, r3, #5
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d56:	d106      	bne.n	8000d66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f836 	bl	8000dd0 <HCD_HC_IN_IRQHandler>
 8000d64:	e005      	b.n	8000d72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fb84 	bl	800147a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3d4      	bcc.n	8000d2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	e000      	b.n	8000d90 <HAL_HCD_IRQHandler+0x210>
      return;
 8000d8e:	bf00      	nop
    }
  }
}
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_HCD_Stop+0x16>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e00d      	b.n	8000dc8 <HAL_HCD_Stop+0x32>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fa53 	bl	8002264 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	015a      	lsls	r2, r3, #5
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d11a      	bne.n	8000e36 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4413      	add	r3, r2
 8000e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2304      	movs	r3, #4
 8000e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	212c      	movs	r1, #44	; 0x2c
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3361      	adds	r3, #97	; 0x61
 8000e20:	2206      	movs	r2, #6
 8000e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f91c 	bl	800206c <USB_HC_Halt>
 8000e34:	e0af      	b.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	015a      	lsls	r2, r3, #5
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4c:	d11b      	bne.n	8000e86 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	015a      	lsls	r2, r3, #5
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4413      	add	r3, r2
 8000e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	212c      	movs	r1, #44	; 0x2c
 8000e68:	fb01 f303 	mul.w	r3, r1, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3361      	adds	r3, #97	; 0x61
 8000e70:	2207      	movs	r2, #7
 8000e72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f8f4 	bl	800206c <USB_HC_Halt>
 8000e84:	e087      	b.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	015a      	lsls	r2, r3, #5
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d109      	bne.n	8000eb0 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2320      	movs	r3, #32
 8000eac:	6093      	str	r3, [r2, #8]
 8000eae:	e072      	b.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d11a      	bne.n	8000efc <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	212c      	movs	r1, #44	; 0x2c
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3361      	adds	r3, #97	; 0x61
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 f8b9 	bl	800206c <USB_HC_Halt>
 8000efa:	e04c      	b.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f12:	d11b      	bne.n	8000f4c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	015a      	lsls	r2, r3, #5
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f20:	461a      	mov	r2, r3
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	212c      	movs	r1, #44	; 0x2c
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	3361      	adds	r3, #97	; 0x61
 8000f36:	2208      	movs	r2, #8
 8000f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 f891 	bl	800206c <USB_HC_Halt>
 8000f4a:	e024      	b.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4413      	add	r3, r2
 8000f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	2b80      	cmp	r3, #128	; 0x80
 8000f60:	d119      	bne.n	8000f96 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	015a      	lsls	r2, r3, #5
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4413      	add	r3, r2
 8000f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	212c      	movs	r1, #44	; 0x2c
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	3361      	adds	r3, #97	; 0x61
 8000f82:	2206      	movs	r2, #6
 8000f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f86b 	bl	800206c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	015a      	lsls	r2, r3, #5
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fac:	d112      	bne.n	8000fd4 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f857 	bl	800206c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	015a      	lsls	r2, r3, #5
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000fd2:	e24e      	b.n	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	015a      	lsls	r2, r3, #5
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	f040 80df 	bne.w	80011aa <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d019      	beq.n	8001028 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	212c      	movs	r1, #44	; 0x2c
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	4413      	add	r3, r2
 8001000:	3348      	adds	r3, #72	; 0x48
 8001002:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	0159      	lsls	r1, r3, #5
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	440b      	add	r3, r1
 800100c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001016:	1ad2      	subs	r2, r2, r3
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	202c      	movs	r0, #44	; 0x2c
 800101e:	fb00 f303 	mul.w	r3, r0, r3
 8001022:	440b      	add	r3, r1
 8001024:	3350      	adds	r3, #80	; 0x50
 8001026:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	212c      	movs	r1, #44	; 0x2c
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	4413      	add	r3, r2
 8001034:	3361      	adds	r3, #97	; 0x61
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	212c      	movs	r1, #44	; 0x2c
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	335c      	adds	r3, #92	; 0x5c
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001058:	461a      	mov	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	212c      	movs	r1, #44	; 0x2c
 8001064:	fb01 f303 	mul.w	r3, r1, r3
 8001068:	4413      	add	r3, r2
 800106a:	333f      	adds	r3, #63	; 0x3f
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d009      	beq.n	8001086 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	212c      	movs	r1, #44	; 0x2c
 8001078:	fb01 f303 	mul.w	r3, r1, r3
 800107c:	4413      	add	r3, r2
 800107e:	333f      	adds	r3, #63	; 0x3f
 8001080:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001082:	2b02      	cmp	r3, #2
 8001084:	d111      	bne.n	80010aa <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f000 ffeb 	bl	800206c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	015a      	lsls	r2, r3, #5
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010a2:	461a      	mov	r2, r3
 80010a4:	2310      	movs	r3, #16
 80010a6:	6093      	str	r3, [r2, #8]
 80010a8:	e03a      	b.n	8001120 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	212c      	movs	r1, #44	; 0x2c
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	333f      	adds	r3, #63	; 0x3f
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d009      	beq.n	80010d2 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	212c      	movs	r1, #44	; 0x2c
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	333f      	adds	r3, #63	; 0x3f
 80010cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d126      	bne.n	8001120 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	015a      	lsls	r2, r3, #5
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4413      	add	r3, r2
 80010da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	0151      	lsls	r1, r2, #5
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	440a      	add	r2, r1
 80010e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80010ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010f0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	212c      	movs	r1, #44	; 0x2c
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	3360      	adds	r3, #96	; 0x60
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	b2d9      	uxtb	r1, r3
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	202c      	movs	r0, #44	; 0x2c
 800110e:	fb00 f303 	mul.w	r3, r0, r3
 8001112:	4413      	add	r3, r2
 8001114:	3360      	adds	r3, #96	; 0x60
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f001 f9fd 	bl	800251a <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d12b      	bne.n	8001180 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	212c      	movs	r1, #44	; 0x2c
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	4413      	add	r3, r2
 8001134:	3348      	adds	r3, #72	; 0x48
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	202c      	movs	r0, #44	; 0x2c
 800113e:	fb00 f202 	mul.w	r2, r0, r2
 8001142:	440a      	add	r2, r1
 8001144:	3240      	adds	r2, #64	; 0x40
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	fbb3 f3f2 	udiv	r3, r3, r2
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 818e 	beq.w	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	212c      	movs	r1, #44	; 0x2c
 800115c:	fb01 f303 	mul.w	r3, r1, r3
 8001160:	4413      	add	r3, r2
 8001162:	3354      	adds	r3, #84	; 0x54
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	212c      	movs	r1, #44	; 0x2c
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	3354      	adds	r3, #84	; 0x54
 800117a:	4602      	mov	r2, r0
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	e178      	b.n	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	212c      	movs	r1, #44	; 0x2c
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	3354      	adds	r3, #84	; 0x54
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f083 0301 	eor.w	r3, r3, #1
 8001194:	b2d8      	uxtb	r0, r3
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	212c      	movs	r1, #44	; 0x2c
 800119c:	fb01 f303 	mul.w	r3, r1, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	3354      	adds	r3, #84	; 0x54
 80011a4:	4602      	mov	r2, r0
 80011a6:	701a      	strb	r2, [r3, #0]
}
 80011a8:	e163      	b.n	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	015a      	lsls	r2, r3, #5
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b02      	cmp	r3, #2
 80011be:	f040 80f6 	bne.w	80013ae <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	212c      	movs	r1, #44	; 0x2c
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	3361      	adds	r3, #97	; 0x61
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d109      	bne.n	80011ea <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	212c      	movs	r1, #44	; 0x2c
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3360      	adds	r3, #96	; 0x60
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e0c9      	b.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	3361      	adds	r3, #97	; 0x61
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d109      	bne.n	8001212 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	212c      	movs	r1, #44	; 0x2c
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3360      	adds	r3, #96	; 0x60
 800120c:	2205      	movs	r2, #5
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e0b5      	b.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	212c      	movs	r1, #44	; 0x2c
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	3361      	adds	r3, #97	; 0x61
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b06      	cmp	r3, #6
 8001224:	d009      	beq.n	800123a <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3361      	adds	r3, #97	; 0x61
 8001234:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001236:	2b08      	cmp	r3, #8
 8001238:	d150      	bne.n	80012dc <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	212c      	movs	r1, #44	; 0x2c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	335c      	adds	r3, #92	; 0x5c
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	202c      	movs	r0, #44	; 0x2c
 8001252:	fb00 f303 	mul.w	r3, r0, r3
 8001256:	440b      	add	r3, r1
 8001258:	335c      	adds	r3, #92	; 0x5c
 800125a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	335c      	adds	r3, #92	; 0x5c
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d912      	bls.n	8001296 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	212c      	movs	r1, #44	; 0x2c
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	335c      	adds	r3, #92	; 0x5c
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	212c      	movs	r1, #44	; 0x2c
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	3360      	adds	r3, #96	; 0x60
 8001290:	2204      	movs	r2, #4
 8001292:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001294:	e073      	b.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	fb01 f303 	mul.w	r3, r1, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	3360      	adds	r3, #96	; 0x60
 80012a4:	2202      	movs	r2, #2
 80012a6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80012be:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012c6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	015a      	lsls	r2, r3, #5
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4413      	add	r3, r2
 80012d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012d4:	461a      	mov	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80012da:	e050      	b.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	3361      	adds	r3, #97	; 0x61
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d122      	bne.n	8001336 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	3360      	adds	r3, #96	; 0x60
 80012fe:	2202      	movs	r2, #2
 8001300:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4413      	add	r3, r2
 800130a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001318:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001320:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4413      	add	r3, r2
 800132a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e023      	b.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	212c      	movs	r1, #44	; 0x2c
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	3361      	adds	r3, #97	; 0x61
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d119      	bne.n	800137e <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	212c      	movs	r1, #44	; 0x2c
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	335c      	adds	r3, #92	; 0x5c
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	202c      	movs	r0, #44	; 0x2c
 8001362:	fb00 f303 	mul.w	r3, r0, r3
 8001366:	440b      	add	r3, r1
 8001368:	335c      	adds	r3, #92	; 0x5c
 800136a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	212c      	movs	r1, #44	; 0x2c
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	4413      	add	r3, r2
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	2204      	movs	r2, #4
 800137c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4413      	add	r3, r2
 8001386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800138a:	461a      	mov	r2, r3
 800138c:	2302      	movs	r3, #2
 800138e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	202c      	movs	r0, #44	; 0x2c
 800139a:	fb00 f303 	mul.w	r3, r0, r3
 800139e:	4413      	add	r3, r2
 80013a0:	3360      	adds	r3, #96	; 0x60
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f001 f8b7 	bl	800251a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80013ac:	e061      	b.n	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	d156      	bne.n	8001472 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	212c      	movs	r1, #44	; 0x2c
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	333f      	adds	r3, #63	; 0x3f
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d111      	bne.n	80013fc <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	212c      	movs	r1, #44	; 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	335c      	adds	r3, #92	; 0x5c
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fe39 	bl	800206c <USB_HC_Halt>
 80013fa:	e031      	b.n	8001460 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	212c      	movs	r1, #44	; 0x2c
 8001402:	fb01 f303 	mul.w	r3, r1, r3
 8001406:	4413      	add	r3, r2
 8001408:	333f      	adds	r3, #63	; 0x3f
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	212c      	movs	r1, #44	; 0x2c
 8001416:	fb01 f303 	mul.w	r3, r1, r3
 800141a:	4413      	add	r3, r2
 800141c:	333f      	adds	r3, #63	; 0x3f
 800141e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001420:	2b02      	cmp	r3, #2
 8001422:	d11d      	bne.n	8001460 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	212c      	movs	r1, #44	; 0x2c
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	335c      	adds	r3, #92	; 0x5c
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d110      	bne.n	8001460 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	212c      	movs	r1, #44	; 0x2c
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	3361      	adds	r3, #97	; 0x61
 800144c:	2203      	movs	r2, #3
 800144e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fe06 	bl	800206c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4413      	add	r3, r2
 8001468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146c:	461a      	mov	r2, r3
 800146e:	2310      	movs	r3, #16
 8001470:	6093      	str	r3, [r2, #8]
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	4413      	add	r3, r2
 800149c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d11a      	bne.n	80014e0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b6:	461a      	mov	r2, r3
 80014b8:	2304      	movs	r3, #4
 80014ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	212c      	movs	r1, #44	; 0x2c
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	3361      	adds	r3, #97	; 0x61
 80014ca:	2206      	movs	r2, #6
 80014cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fdc7 	bl	800206c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80014de:	e331      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d12e      	bne.n	8001554 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001502:	461a      	mov	r2, r3
 8001504:	2320      	movs	r3, #32
 8001506:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	333d      	adds	r3, #61	; 0x3d
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	f040 8313 	bne.w	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	333d      	adds	r3, #61	; 0x3d
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	212c      	movs	r1, #44	; 0x2c
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	3360      	adds	r3, #96	; 0x60
 800153e:	2202      	movs	r2, #2
 8001540:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd8d 	bl	800206c <USB_HC_Halt>
}
 8001552:	e2f7      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4413      	add	r3, r2
 800155c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800156a:	d112      	bne.n	8001592 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	4413      	add	r3, r2
 8001574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001578:	461a      	mov	r2, r3
 800157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fd6e 	bl	800206c <USB_HC_Halt>
}
 8001590:	e2d8      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4413      	add	r3, r2
 800159a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d140      	bne.n	800162a <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	212c      	movs	r1, #44	; 0x2c
 80015ae:	fb01 f303 	mul.w	r3, r1, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	335c      	adds	r3, #92	; 0x5c
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015cc:	2b40      	cmp	r3, #64	; 0x40
 80015ce:	d111      	bne.n	80015f4 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	212c      	movs	r1, #44	; 0x2c
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	333d      	adds	r3, #61	; 0x3d
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ee:	461a      	mov	r2, r3
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001600:	461a      	mov	r2, r3
 8001602:	2301      	movs	r3, #1
 8001604:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	3361      	adds	r3, #97	; 0x61
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fd22 	bl	800206c <USB_HC_Halt>
}
 8001628:	e28c      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4413      	add	r3, r2
 8001632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	d12c      	bne.n	800169a <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	212c      	movs	r1, #44	; 0x2c
 8001646:	fb01 f303 	mul.w	r3, r1, r3
 800164a:	4413      	add	r3, r2
 800164c:	3361      	adds	r3, #97	; 0x61
 800164e:	2204      	movs	r2, #4
 8001650:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	333d      	adds	r3, #61	; 0x3d
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	335c      	adds	r3, #92	; 0x5c
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fcf3 	bl	800206c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	461a      	mov	r2, r3
 8001694:	2340      	movs	r3, #64	; 0x40
 8001696:	6093      	str	r3, [r2, #8]
}
 8001698:	e254      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d11a      	bne.n	80016e6 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016bc:	461a      	mov	r2, r3
 80016be:	2308      	movs	r3, #8
 80016c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	3361      	adds	r3, #97	; 0x61
 80016d0:	2205      	movs	r2, #5
 80016d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fcc4 	bl	800206c <USB_HC_Halt>
}
 80016e4:	e22e      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d140      	bne.n	800177e <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	335c      	adds	r3, #92	; 0x5c
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3361      	adds	r3, #97	; 0x61
 800171c:	2203      	movs	r2, #3
 800171e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	333d      	adds	r3, #61	; 0x3d
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	333c      	adds	r3, #60	; 0x3c
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d108      	bne.n	800175a <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	333d      	adds	r3, #61	; 0x3d
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fc81 	bl	800206c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	461a      	mov	r2, r3
 8001778:	2310      	movs	r3, #16
 800177a:	6093      	str	r3, [r2, #8]
}
 800177c:	e1e2      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4413      	add	r3, r2
 8001786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b80      	cmp	r3, #128	; 0x80
 8001792:	d164      	bne.n	800185e <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d111      	bne.n	80017c0 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3361      	adds	r3, #97	; 0x61
 80017aa:	2206      	movs	r2, #6
 80017ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fc57 	bl	800206c <USB_HC_Halt>
 80017be:	e044      	b.n	800184a <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	335c      	adds	r3, #92	; 0x5c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	202c      	movs	r0, #44	; 0x2c
 80017d8:	fb00 f303 	mul.w	r3, r0, r3
 80017dc:	440b      	add	r3, r1
 80017de:	335c      	adds	r3, #92	; 0x5c
 80017e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	335c      	adds	r3, #92	; 0x5c
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d920      	bls.n	8001838 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	335c      	adds	r3, #92	; 0x5c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3360      	adds	r3, #96	; 0x60
 8001816:	2204      	movs	r2, #4
 8001818:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	b2d9      	uxtb	r1, r3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	202c      	movs	r0, #44	; 0x2c
 8001824:	fb00 f303 	mul.w	r3, r0, r3
 8001828:	4413      	add	r3, r2
 800182a:	3360      	adds	r3, #96	; 0x60
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fe72 	bl	800251a <HAL_HCD_HC_NotifyURBChange_Callback>
 8001836:	e008      	b.n	800184a <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	212c      	movs	r1, #44	; 0x2c
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4413      	add	r3, r2
 8001852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001856:	461a      	mov	r2, r3
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	6093      	str	r3, [r2, #8]
}
 800185c:	e172      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4413      	add	r3, r2
 8001866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d11b      	bne.n	80018ae <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3361      	adds	r3, #97	; 0x61
 8001884:	2208      	movs	r2, #8
 8001886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fbea 	bl	800206c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a4:	461a      	mov	r2, r3
 80018a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018aa:	6093      	str	r3, [r2, #8]
}
 80018ac:	e14a      	b.n	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	f040 813f 	bne.w	8001b44 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3361      	adds	r3, #97	; 0x61
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d17d      	bne.n	80019d6 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3360      	adds	r3, #96	; 0x60
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	333f      	adds	r3, #63	; 0x3f
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d00a      	beq.n	8001916 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	333f      	adds	r3, #63	; 0x3f
 800190e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001910:	2b03      	cmp	r3, #3
 8001912:	f040 8100 	bne.w	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d113      	bne.n	8001946 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3355      	adds	r3, #85	; 0x55
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f083 0301 	eor.w	r3, r3, #1
 8001932:	b2d8      	uxtb	r0, r3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3355      	adds	r3, #85	; 0x55
 8001942:	4602      	mov	r2, r0
 8001944:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	2b01      	cmp	r3, #1
 800194c:	f040 80e3 	bne.w	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	334c      	adds	r3, #76	; 0x4c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80d8 	beq.w	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	334c      	adds	r3, #76	; 0x4c
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	202c      	movs	r0, #44	; 0x2c
 800197c:	fb00 f202 	mul.w	r2, r0, r2
 8001980:	440a      	add	r2, r1
 8001982:	3240      	adds	r2, #64	; 0x40
 8001984:	8812      	ldrh	r2, [r2, #0]
 8001986:	4413      	add	r3, r2
 8001988:	3b01      	subs	r3, #1
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	202c      	movs	r0, #44	; 0x2c
 8001990:	fb00 f202 	mul.w	r2, r0, r2
 8001994:	440a      	add	r2, r1
 8001996:	3240      	adds	r2, #64	; 0x40
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	fbb3 f3f2 	udiv	r3, r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80b5 	beq.w	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3355      	adds	r3, #85	; 0x55
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	f083 0301 	eor.w	r3, r3, #1
 80019c0:	b2d8      	uxtb	r0, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3355      	adds	r3, #85	; 0x55
 80019d0:	4602      	mov	r2, r0
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e09f      	b.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3361      	adds	r3, #97	; 0x61
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d109      	bne.n	80019fe <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e08b      	b.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3361      	adds	r3, #97	; 0x61
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d109      	bne.n	8001a26 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3360      	adds	r3, #96	; 0x60
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e077      	b.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	212c      	movs	r1, #44	; 0x2c
 8001a2c:	fb01 f303 	mul.w	r3, r1, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	3361      	adds	r3, #97	; 0x61
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d109      	bne.n	8001a4e <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3360      	adds	r3, #96	; 0x60
 8001a48:	2205      	movs	r2, #5
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e063      	b.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	3361      	adds	r3, #97	; 0x61
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d009      	beq.n	8001a76 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3361      	adds	r3, #97	; 0x61
 8001a70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d14f      	bne.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	335c      	adds	r3, #92	; 0x5c
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	202c      	movs	r0, #44	; 0x2c
 8001a8e:	fb00 f303 	mul.w	r3, r0, r3
 8001a92:	440b      	add	r3, r1
 8001a94:	335c      	adds	r3, #92	; 0x5c
 8001a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	335c      	adds	r3, #92	; 0x5c
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d912      	bls.n	8001ad2 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	335c      	adds	r3, #92	; 0x5c
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3360      	adds	r3, #96	; 0x60
 8001acc:	2204      	movs	r2, #4
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	e021      	b.n	8001b16 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3360      	adds	r3, #96	; 0x60
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001afa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b02:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b10:	461a      	mov	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b22:	461a      	mov	r2, r3
 8001b24:	2302      	movs	r3, #2
 8001b26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	b2d9      	uxtb	r1, r3
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	202c      	movs	r0, #44	; 0x2c
 8001b32:	fb00 f303 	mul.w	r3, r0, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3360      	adds	r3, #96	; 0x60
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fceb 	bl	800251a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b80:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d004      	beq.n	8001b92 <HCD_RXQLVL_IRQHandler+0x46>
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	f000 80a9 	beq.w	8001ce2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001b90:	e0aa      	b.n	8001ce8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a6 	beq.w	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3344      	adds	r3, #68	; 0x44
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 809b 	beq.w	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3350      	adds	r3, #80	; 0x50
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	202c      	movs	r0, #44	; 0x2c
 8001bca:	fb00 f303 	mul.w	r3, r0, r3
 8001bce:	440b      	add	r3, r1
 8001bd0:	334c      	adds	r3, #76	; 0x4c
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d87a      	bhi.n	8001cce <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3344      	adds	r3, #68	; 0x44
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f000 f977 	bl	8001ee4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3344      	adds	r3, #68	; 0x44
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	441a      	add	r2, r3
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	202c      	movs	r0, #44	; 0x2c
 8001c10:	fb00 f303 	mul.w	r3, r0, r3
 8001c14:	440b      	add	r3, r1
 8001c16:	3344      	adds	r3, #68	; 0x44
 8001c18:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	3350      	adds	r3, #80	; 0x50
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	202c      	movs	r0, #44	; 0x2c
 8001c34:	fb00 f303 	mul.w	r3, r0, r3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3350      	adds	r3, #80	; 0x50
 8001c3c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	0cdb      	lsrs	r3, r3, #19
 8001c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c52:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3340      	adds	r3, #64	; 0x40
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d13c      	bne.n	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d039      	beq.n	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c88:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c90:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3354      	adds	r3, #84	; 0x54
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f083 0301 	eor.w	r3, r3, #1
 8001cb8:	b2d8      	uxtb	r0, r3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3354      	adds	r3, #84	; 0x54
 8001cc8:	4602      	mov	r2, r0
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e00b      	b.n	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3360      	adds	r3, #96	; 0x60
 8001cdc:	2204      	movs	r2, #4
 8001cde:	701a      	strb	r2, [r3, #0]
      break;
 8001ce0:	e001      	b.n	8001ce6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001ce6:	bf00      	nop
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d10b      	bne.n	8001d40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fbd5 	bl	80024e2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d132      	bne.n	8001db0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d126      	bne.n	8001daa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d113      	bne.n	8001d8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d6e:	d106      	bne.n	8001d7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f92d 	bl	8001fd6 <USB_InitFSLSPClkSel>
 8001d7c:	e011      	b.n	8001da2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f926 	bl	8001fd6 <USB_InitFSLSPClkSel>
 8001d8a:	e00a      	b.n	8001da2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001da0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fbc7 	bl	8002536 <HAL_HCD_PortEnabled_Callback>
 8001da8:	e002      	b.n	8001db0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fbd1 	bl	8002552 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d103      	bne.n	8001dc2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	6013      	str	r3, [r2, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 0201 	bic.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <USB_FlushTxFifo+0x64>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e01b      	b.n	8001e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	daf2      	bge.n	8001e2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <USB_FlushTxFifo+0x64>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e006      	b.n	8001e74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d0f0      	beq.n	8001e54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	00030d40 	.word	0x00030d40

08001e84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <USB_FlushRxFifo+0x5c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e018      	b.n	8001ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	daf2      	bge.n	8001e90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <USB_FlushRxFifo+0x5c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e006      	b.n	8001ed4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d0f0      	beq.n	8001eb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	00030d40 	.word	0x00030d40

08001ee4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	e014      	b.n	8001f3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3301      	adds	r3, #1
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	3301      	adds	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3e6      	bcc.n	8001f10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001f42:	8bfb      	ldrh	r3, [r7, #30]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01e      	beq.n	8001f86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f52:	461a      	mov	r2, r3
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	701a      	strb	r2, [r3, #0]
      i++;
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	3301      	adds	r3, #1
 8001f72:	623b      	str	r3, [r7, #32]
      pDest++;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3301      	adds	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001f7a:	8bfb      	ldrh	r3, [r7, #30]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001f80:	8bfb      	ldrh	r3, [r7, #30]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ea      	bne.n	8001f5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	372c      	adds	r7, #44	; 0x2c
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff4:	f023 0303 	bic.w	r3, r3, #3
 8001ff8:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201e:	461a      	mov	r2, r3
 8002020:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002024:	6053      	str	r3, [r2, #4]
 8002026:	e009      	b.n	800203c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d106      	bne.n	800203c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002034:	461a      	mov	r2, r3
 8002036:	f241 7370 	movw	r3, #6000	; 0x1770
 800203a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	b29b      	uxth	r3, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0fdb      	lsrs	r3, r3, #31
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d104      	bne.n	80020c6 <USB_HC_Halt+0x5a>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e0c8      	b.n	8002258 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <USB_HC_Halt+0x66>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d163      	bne.n	800219a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	0151      	lsls	r1, r2, #5
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	440a      	add	r2, r1
 80020e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020f0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80ab 	bne.w	8002256 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d133      	bne.n	8002174 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	0151      	lsls	r1, r2, #5
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	440a      	add	r2, r1
 8002122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800212a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	0151      	lsls	r1, r2, #5
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	440a      	add	r2, r1
 8002142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800214a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002158:	d81d      	bhi.n	8002196 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800216c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002170:	d0ec      	beq.n	800214c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002172:	e070      	b.n	8002256 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	0151      	lsls	r1, r2, #5
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	440a      	add	r2, r1
 800218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002192:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002194:	e05f      	b.n	8002256 <USB_HC_Halt+0x1ea>
            break;
 8002196:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002198:	e05d      	b.n	8002256 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021b8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d133      	bne.n	8002232 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	0151      	lsls	r1, r2, #5
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	440a      	add	r2, r1
 8002200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002208:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002216:	d81d      	bhi.n	8002254 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	015a      	lsls	r2, r3, #5
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800222a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222e:	d0ec      	beq.n	800220a <USB_HC_Halt+0x19e>
 8002230:	e011      	b.n	8002256 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e000      	b.n	8002256 <USB_HC_Halt+0x1ea>
          break;
 8002254:	bf00      	nop
    }
  }

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3724      	adds	r7, #36	; 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fdbd 	bl	8001df8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800227e:	2110      	movs	r1, #16
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fdcb 	bl	8001e1c <USB_FlushTxFifo>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fdf7 	bl	8001e84 <USB_FlushRxFifo>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e01f      	b.n	80022e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d9dc      	bls.n	80022a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e034      	b.n	800235c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002308:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002310:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002318:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	461a      	mov	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3301      	adds	r3, #1
 8002330:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002338:	d80c      	bhi.n	8002354 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800234c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002350:	d0ec      	beq.n	800232c <USB_StopHost+0xc8>
 8002352:	e000      	b.n	8002356 <USB_StopHost+0xf2>
        break;
 8002354:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	3301      	adds	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d9c7      	bls.n	80022f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002368:	461a      	mov	r2, r3
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fd2c 	bl	8001dd6 <USB_EnableGlobalInt>

  return ret;
 800237e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f804 	bl	80023ac <USBH_HandleSof>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b0b      	cmp	r3, #11
 80023bc:	d10a      	bne.n	80023d4 <USBH_HandleSof+0x28>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80023ec:	bf00      	nop
}
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002408:	bf00      	nop
}
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f883 	bl	800256e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	791b      	ldrb	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f80b 	bl	800248a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	795b      	ldrb	r3, [r3, #5]
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f805 	bl	800248a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	2b0f      	cmp	r3, #15
 800249a:	d80d      	bhi.n	80024b8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	33e0      	adds	r3, #224	; 0xe0
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	33e0      	adds	r3, #224	; 0xe0
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff57 	bl	8002388 <USBH_LL_IncTimer>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff8f 	bl	8002414 <USBH_LL_Connect>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff98 	bl	8002442 <USBH_LL_Disconnect>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
 8002526:	4613      	mov	r3, r2
 8002528:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff49 	bl	80023dc <USBH_LL_PortEnabled>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff49 	bl	80023f8 <USBH_LL_PortDisabled>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fc06 	bl	8000d96 <HAL_HCD_Stop>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f807 	bl	80025a4 <USBH_Get_USB_Status>
 8002596:	4603      	mov	r3, r0
 8002598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800259a:	7bbb      	ldrb	r3, [r7, #14]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d817      	bhi.n	80025e8 <USBH_Get_USB_Status+0x44>
 80025b8:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <USBH_Get_USB_Status+0x1c>)
 80025ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025be:	bf00      	nop
 80025c0:	080025d1 	.word	0x080025d1
 80025c4:	080025d7 	.word	0x080025d7
 80025c8:	080025dd 	.word	0x080025dd
 80025cc:	080025e3 	.word	0x080025e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
    break;
 80025d4:	e00b      	b.n	80025ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80025d6:	2302      	movs	r3, #2
 80025d8:	73fb      	strb	r3, [r7, #15]
    break;
 80025da:	e008      	b.n	80025ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
    break;
 80025e0:	e005      	b.n	80025ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80025e2:	2302      	movs	r3, #2
 80025e4:	73fb      	strb	r3, [r7, #15]
    break;
 80025e6:	e002      	b.n	80025ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80025e8:	2302      	movs	r3, #2
 80025ea:	73fb      	strb	r3, [r7, #15]
    break;
 80025ec:	bf00      	nop
  }
  return usb_status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 f818 	bl	8002644 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	0800265c 	.word	0x0800265c
 8002638:	0800265c 	.word	0x0800265c
 800263c:	0800265c 	.word	0x0800265c
 8002640:	08002660 	.word	0x08002660

08002644 <_init>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr

08002650 <_fini>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr
